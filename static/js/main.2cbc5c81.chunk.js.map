{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","state","good","neutral","bad","handleGoodClick","setState","prev","handleNeutralClick","handleBadClick","e","console","log","target","value","id","this","countTotalFeedback","positive","Math","trunc","onClick","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qRAGMA,E,4MACJC,MAAQ,CACNC,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAcPC,gBAAkB,WAChB,EAAKC,UAAS,SAACC,GAAD,MAAW,CAAEL,KAAMK,EAAKL,KAAO,O,EAE/CM,mBAAqB,WACnB,EAAKF,UAAS,SAACC,GAAD,MAAW,CAAEJ,QAASI,EAAKJ,QAAU,O,EAErDM,eAAiB,WACf,EAAKH,UAAS,SAACC,GAAD,MAAW,CAAEH,IAAKG,EAAKH,IAAM,O,iDAlB7C,SAAYM,GACVC,QAAQC,IAAIF,EAAEG,OAAOC,OACrBH,QAAQC,IAAIF,GACZC,QAAQC,IAAIF,EAAEG,OAAOE,M,oBAkBvB,WACE,MAA+BC,KAAKf,MAA5BC,EAAR,EAAQA,KACFe,EAAqBf,EAD3B,EAAcC,QAAd,EAAuBC,IAEjBc,EACmB,IAAvBD,EACI,EACAE,KAAKC,MAAc,IAAPlB,EAAce,GAChC,OACE,gCACE,uDACA,gCACE,wBAAQI,QAASL,KAAKX,gBAAtB,kBACA,wBAAQgB,QAASL,KAAKR,mBAAtB,qBACA,wBAAQa,QAASL,KAAKP,eAAtB,oBAEF,4CACA,uCAAUO,KAAKf,MAAMC,QACrB,0CAAac,KAAKf,MAAME,WACxB,sCAASa,KAAKf,MAAMG,OAEpB,gDAAmBa,KACnB,mDAAsBC,EAAtB,e,GAjDUI,aAuDHtB,IC9CAuB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2cbc5c81.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  handleInput(e) {\n    console.log(e.target.value);\n    console.log(e);\n    console.log(e.target.id);\n  }\n\n  // handleClick = (e) => {\n  //   const currBtn = e.target.id;\n  //   console.log(currBtn);\n  //   this.setState({ currBtn: this.state.currBtn + 1 });\n  // };\n  handleGoodClick = () => {\n    this.setState((prev) => ({ good: prev.good + 1 }));\n  };\n  handleNeutralClick = () => {\n    this.setState((prev) => ({ neutral: prev.neutral + 1 }));\n  };\n  handleBadClick = () => {\n    this.setState((prev) => ({ bad: prev.bad + 1 }));\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    const countTotalFeedback = good + neutral + bad;\n    const positive =\n      countTotalFeedback === 0\n        ? 0\n        : Math.trunc((good * 100) / countTotalFeedback);\n    return (\n      <div>\n        <h1>Please leave feedback</h1>\n        <div>\n          <button onClick={this.handleGoodClick}>Good</button>\n          <button onClick={this.handleNeutralClick}>Neutral</button>\n          <button onClick={this.handleBadClick}>Bad</button>\n        </div>\n        <h1>Statistics</h1>\n        <p>Good: {this.state.good}</p>\n        <p>Neutral: {this.state.neutral}</p>\n        <p>Bad: {this.state.bad}</p>\n\n        <p>Total reviews: {countTotalFeedback}</p>\n        <p>Positive reviews: {positive} %</p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}