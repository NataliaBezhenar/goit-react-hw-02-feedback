{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.js","components/Statistics/Statistics.js","components/Section/Section.js","components/Notification/Notification.js","App.js","reportWebVitals.js","index.js"],"names":["FeedbackOptions","options","onLeaveFeedback","Object","keys","map","item","onClick","Statistics","good","neutral","bad","total","positivePercentage","Section","title","children","Notification","msg","App","state","handleClick","btnName","setState","prev","countTotalFeedback","values","reduce","acc","value","countPositiveFeedbackPercentage","totalFeedbackCount","Math","round","this","totalFeedback","positive","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4RAkBeA,EAfS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OACtB,8BACGC,OAAOC,KAAKH,GAASI,KAAI,SAACC,GAAD,OACxB,wBAAmBC,QAAS,kBAAML,EAAgBI,IAAlD,SACGA,GADUA,SCeJE,EAlBI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACjB,gCACE,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,KACT,gDAAmBC,KACnB,mDAAsBC,EAAtB,YCMWC,EAZC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,gCACE,6BAAKD,IACJC,MCEUC,EALM,SAAC,GAAD,IAAGC,EAAH,EAAGA,IAAH,OAAa,6BAAKA,KCIjCC,E,4MACJC,MAAQ,CACNX,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPU,YAAc,SAACC,GACb,EAAKC,UAAS,SAACC,GAAD,sBAAcF,EAAUE,EAAKF,GAAW,O,EAGxDG,mBAAqB,WACnB,OAAOtB,OAAOuB,OAAO,EAAKN,OAAOO,QAAO,SAACC,EAAKC,GAAN,OAAgBD,EAAMC,IAAO,I,EAGvEC,gCAAkC,SAACC,GACjC,OAA8B,IAAvBA,EACH,EACAC,KAAKC,MAAyB,IAAlB,EAAKb,MAAMX,KAAcsB,I,4CAG3C,WACE,MAA+BG,KAAKd,MAA5BX,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACjBwB,EAAgBD,KAAKT,qBACrBW,EAAWF,KAAKJ,gCAAgCK,GAEtD,OACE,gCACE,cAAC,EAAD,CACEpB,MAAM,wBACNC,SACE,cAAC,EAAD,CACEf,QAASiC,KAAKd,MACdlB,gBAAiBgC,KAAKb,gBAK5B,cAAC,EAAD,CACEN,MAAM,aACNC,SACoB,IAAlBmB,EACE,cAAC,EAAD,CAAcjB,IAAI,yBAElB,cAAC,EAAD,CACET,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOuB,EACPtB,mBAAoBuB,a,GAjDlBC,aA2DHlB,ICtDAmB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4f6e4eef.chunk.js","sourcesContent":["import React from \"react\";\nimport { PropTypes } from \"prop-types\";\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => (\n  <div>\n    {Object.keys(options).map((item) => (\n      <button key={item} onClick={() => onLeaveFeedback(item)}>\n        {item}\n      </button>\n    ))}\n  </div>\n);\n\nFeedbackOptions.propTypes = {\n  onLeaveFeedback: PropTypes.func.isRequired,\n  options: PropTypes.object.isRequired,\n};\n\nexport default FeedbackOptions;\n","import React from \"react\";\r\nimport { PropTypes } from \"prop-types\";\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\r\n  <div>\r\n    <p>Good: {good}</p>\r\n    <p>Neutral: {neutral}</p>\r\n    <p>Bad: {bad}</p>\r\n    <p>Total reviews: {total}</p>\r\n    <p>Positive reviews: {positivePercentage} %</p>\r\n  </div>\r\n);\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Statistics;\r\n","import React from \"react\";\nimport { PropTypes } from \"prop-types\";\n\nconst Section = ({ title, children }) => (\n  <div>\n    <h1>{title}</h1>\n    {children}\n  </div>\n);\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.element.isRequired,\n};\n\nexport default Section;\n","import React from \"react\";\nimport { PropTypes } from \"prop-types\";\n\nconst Notification = ({ msg }) => <h2>{msg}</h2>;\n\nNotification.propTypes = {\n  msg: PropTypes.string.isRequired,\n};\nexport default Notification;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport FeedbackOptions from \"./components/FeedbackOptions/FeedbackOptions\";\nimport Statistics from \"./components/Statistics/Statistics\";\nimport Section from \"./components/Section/Section\";\nimport Notification from \"./components/Notification/Notification\";\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  handleClick = (btnName) => {\n    this.setState((prev) => ({ [btnName]: prev[btnName] + 1 }));\n  };\n\n  countTotalFeedback = () => {\n    return Object.values(this.state).reduce((acc, value) => acc + value, 0);\n  };\n\n  countPositiveFeedbackPercentage = (totalFeedbackCount) => {\n    return totalFeedbackCount === 0\n      ? 0\n      : Math.round((this.state.good * 100) / totalFeedbackCount);\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    const totalFeedback = this.countTotalFeedback();\n    const positive = this.countPositiveFeedbackPercentage(totalFeedback);\n\n    return (\n      <div>\n        <Section\n          title=\"Please leave feedback\"\n          children={\n            <FeedbackOptions\n              options={this.state}\n              onLeaveFeedback={this.handleClick}\n            />\n          }\n        />\n\n        <Section\n          title=\"Statistics\"\n          children={\n            totalFeedback === 0 ? (\n              <Notification msg=\"There is no feedback\" />\n            ) : (\n              <Statistics\n                good={good}\n                neutral={neutral}\n                bad={bad}\n                total={totalFeedback}\n                positivePercentage={positive}\n              />\n            )\n          }\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}