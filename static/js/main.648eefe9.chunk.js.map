{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.js","App.js","reportWebVitals.js","index.js"],"names":["FeedbackOptions","options","onLeaveFeedback","Object","keys","map","item","onClick","App","state","good","neutral","bad","handleClick","btnName","setState","prev","this","countTotalFeedback","positive","Math","round","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4RAkBeA,EAfS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OACtB,8BACGC,OAAOC,KAAKH,GAASI,KAAI,SAACC,GAAD,OACxB,wBAAmBC,QAAS,kBAAML,EAAgBI,IAAlD,SACGA,GADUA,SCFbE,E,4MACJC,MAAQ,CACNC,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPC,YAAc,SAACC,GACb,EAAKC,UAAS,SAACC,GAAD,sBAAcF,EAAUE,EAAKF,GAAW,O,4CAGxD,WACE,MAA+BG,KAAKR,MAA5BC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACjBM,EAAqBR,EAAOC,EAAUC,EACtCO,EACmB,IAAvBD,EACI,EACAE,KAAKC,MAAc,IAAPX,EAAcQ,GAChC,OACE,gCACE,uDAEA,cAAC,EAAD,CACEjB,QAASgB,KAAKR,MACdP,gBAAiBe,KAAKJ,cAGxB,4CACA,uCAAUH,KACV,0CAAaC,KACb,sCAASC,KAET,gDAAmBM,KACnB,mDAAsBC,EAAtB,e,GAjCUG,aAuCHd,IC/BAe,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.648eefe9.chunk.js","sourcesContent":["import React from \"react\";\nimport { PropTypes } from \"prop-types\";\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => (\n  <div>\n    {Object.keys(options).map((item) => (\n      <button key={item} onClick={() => onLeaveFeedback(item)}>\n        {item}\n      </button>\n    ))}\n  </div>\n);\n\nFeedbackOptions.propTypes = {\n  onLeaveFeedback: PropTypes.func.isRequired,\n  options: PropTypes.object.isRequired,\n};\n\nexport default FeedbackOptions;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport FeedbackOptions from \"./components/FeedbackOptions/FeedbackOptions\";\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  handleClick = (btnName) => {\n    this.setState((prev) => ({ [btnName]: prev[btnName] + 1 }));\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    const countTotalFeedback = good + neutral + bad;\n    const positive =\n      countTotalFeedback === 0\n        ? 0\n        : Math.round((good * 100) / countTotalFeedback);\n    return (\n      <div>\n        <h1>Please leave feedback</h1>\n\n        <FeedbackOptions\n          options={this.state}\n          onLeaveFeedback={this.handleClick}\n        />\n\n        <h1>Statistics</h1>\n        <p>Good: {good}</p>\n        <p>Neutral: {neutral}</p>\n        <p>Bad: {bad}</p>\n\n        <p>Total reviews: {countTotalFeedback}</p>\n        <p>Positive reviews: {positive} %</p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}